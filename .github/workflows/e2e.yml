name: build

on:
  push:
    branches:
      - "master"
      - "develop"
    tags:
      - 'v*'
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/images/**'
      - 'config.toml'
      - 'docker-compose.yml'
      - 'Makefile'
      - '**.md'
  pull_request:
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/images/**'
      - 'config.toml'
      - 'docker-compose.yml'
      - 'Makefile'
      - '**.md'

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  GO_VERSION: '1.23'
  NODE_VERSION: '20.17.0'

permissions:
  contents: write
  packages: write

jobs:
  web:
    name: Build web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up corepack
        run: corepack enable

      # It can not be done before enable corepack
      - name: Set up cache
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          cache-dependency-path: web/pnpm-lock.yaml

      - name: Fetch web dependencies
        working-directory: web
        run: pnpm install --frozen-lockfile

      - name: Build web frontend
        working-directory: web
        run: CI= pnpm run build

      - name: Upload web production build
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web/dist

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: [ web ]
    name:  E2E tests on ${{ matrix.os }} with Chromium
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go

      - name: Cache drivers
        uses: actions/cache@v4
        with:
          # In order:
          # * Driver for linux
          # * Driver for macOS
          # * Driver for windows
          path: |
            ~/.cache/ms-playwright-go
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright-go
            ~/Library/Caches/ms-playwright
            ~\AppData\Local\ms-playwright-go
            ~\AppData\Local\ms-playwright
          key: ${{ runner.os }}-chromium-${{ hashFiles('**/run.go') }}
      - run: |
          go install github.com/playwright-community/playwright-go/cmd/playwright@latest
          playwright install --with-deps chromium

      # start mockindexer
      - name: Start MockIndexer
        run: |
          go build -o mockindexer ./test/mockindexer/main.go
          nohup ./mockindexer &  # Run the app in the background 

      # Step 3: Build and run the application (main.go) in the background
      - name: Start Application and generate pprof Profile
        run: |
          go build -o autobrr cmd/autobrr/main.go
          nohup ./autobrr --config . --pgo cpu-${{ matrix.os }}.pprof --pgo-autokill=false &  # Run the app in the background 

      # Step 4: Initialize and run integration tests
      - name: Run Integration Tests
        run: |
          echo "Running integration tests..."
          go test -v ./test/e2e/main.go
#          go test -v -tags=integration ./test/e2e/main.go

      # (Optional) Step 5: Stop Background Application
      - name: Stop Application
        run: pkill -QUIT autobrr

      - name: Stop MockIndexer
        run: pkill mockindexer

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof-pgo-${{ matrix.os }}
          path: cpu-${{ matrix.os }}.pprof

#      - name: Upload pprof
#        uses: actions/upload-artifact@v4
#        with:
#          name: pprof-test-${{ matrix.os }}
#          path: profile

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always()
